import { z, ZodError } from 'zod'

const accountSchema = z.strictObject({
  gold: z.number(),
  id: z.number(),
  maxGold: z.number(),
  plots: z.array(z.strictObject({
    d: z.number(),
    dim: z.tuple([z.number(), z.number(), z.number()]),
    h: z.number(),
    id: z.number(),
    pos: z.tuple([z.number(), z.number(), z.number()]),
    sellCd: z.number(),
    w: z.number(),
    x: z.number(),
    y: z.number(),
    z: z.number(),
  })),
})

const oldConditionsSchema = z.strictObject({
  od: z.number().optional(),
  d: z.number().optional(),
  s: z.union([z.number(), z.null()]).optional(),
  v: z.union([z.number(), z.null()]).optional(),
  timerElements: z.array(z.unknown()).optional(),
  conditionElements: z.array(z.unknown()).optional(),
})

const conditionsSchema = z.strictObject({
  duration: z.number(),
  expireAt: z.number(),
  numStacks: z.union([z.number(), z.null()]),
  value: z.union([z.number(), z.null()]),
})

const itemSchema = z.strictObject({
  md: z.string(),
  n: z.number().optional(),
  qual: z.number(),
  r: z.number().optional(),
  plvl: z.number().optional(),
  qlvl: z.number().optional(),
  s: z.number().optional(),
  mods: z.record(z.string(), z.unknown()).optional(),
  ele: z.number().optional(),
  ir: z.number().optional(),
  lr: z.number().optional(),
  c: z.number().optional(),
  sockets: z.unknown().optional(),
  mailId: z.number().optional(),
  from: z.string().optional(),
  items: z.array(z.unknown()).optional(),
})

const oldMetadataEntitiesSchema = z.strictObject({
  type: z.unknown(),
  isMonster: z.boolean().optional(),
  canHunt: z.boolean().optional(),
  name: z.string().optional(),
  isStation: z.boolean().optional(),
  s: z.number().optional(),
  recipe: z.unknown().optional(),
  canCollide: z.boolean().optional(),
  canChop: z.boolean().optional(),
  isResource: z.boolean().optional(),
  isPortal: z.boolean().optional(),
  isVessel: z.boolean().optional(),
  tags: z.unknown().optional(),
  isBox: z.boolean().optional(),
  isPlant: z.boolean().optional(),
  canHarvest: z.boolean().optional(),
  canMine: z.boolean().optional(),
  isNpc: z.boolean().optional(),
  isPlayer: z.boolean().optional(),
})

const oldMetadataItemsSchema = z.strictObject({
  tags: z.unknown().optional(),
  isSkill: z.boolean().optional(),
  name: z.string().optional(),
  isMat: z.boolean().optional(),
  s: z.number().optional(),
  isStation: z.boolean().optional(),
  recipe: z.unknown().optional(),
  type: z.unknown().optional(),
  isWeapon: z.boolean().optional(),
  dmgTypes: z.array(z.string()).optional(),
  slots: z.array(z.string()).optional(),
  isArmor: z.boolean().optional(),
  isEssence: z.boolean().optional(),
  isVessel: z.boolean().optional(),
  isBox: z.boolean().optional(),
  isTool: z.boolean().optional(),
  canOpen: z.boolean().optional(),
  isAccessory: z.boolean().optional(),
})

const skillSchema = z.strictObject({
  md: z.string(),
  lvl: z.number(),
  baseValue: z.number(),
  value: z.number(),
  useType: z.number(),
  tags: z.object({}).optional(), // z.instanceof(Set),
  mods: z.record(z.string(), z.number()),
  dmgs: z.record(z.string(), z.number()).optional(),
  power: z.record(z.string(), z.number()).optional(),
  phys: z.number().optional(),
  fire: z.number().optional(),
  cold: z.number().optional(),
  elec: z.number().optional(),
  acid: z.number().optional(),
  crit: z.number().optional(),
  critMult: z.number().optional(),
  eleChance: z.record(z.string(), z.number()).optional(),
  cost: z.number(),
  range: z.number(),
  aoe: z.number().optional(),
  gcd: z.number().optional(),
  duration: z.number().optional(),
  cd: z.number().optional(),
  castTime: z.number().optional(),
  moveSpeed: z.number().optional(),
  runeMd: z.string(),
  i: z.number(),
})

const entitiesSchema = z.array(z.strictObject({
  id: z.number(),
  md: z.string(),
  x: z.number(),
  y: z.number(),
  z: z.number(),
  mp: z.number().optional(),
  maxMp: z.number().optional(),
  moveSpeed: z.number().optional(),
  level: z.number().optional(),
  fx: z.record(z.string(), oldConditionsSchema).optional(),
  effects: z.record(z.string(), oldConditionsSchema).optional(),
  dx: z.number().optional(),
  dy: z.number().optional(),
  maxHp: z.number().optional(),
  hp: z.number().optional(),
  hps: z.number().optional(),
  name: z.string().optional(),
  player: z.number().optional(),
  gear: z.record(z.string(), z.union([itemSchema, z.null()])).optional(),
  mogs: z.record(z.string(), z.string()).optional(),
  mtx: z.strictObject({
    face: z.number(),
    skin: z.number(),
    helmet: z.number(),
  }).optional(),
  cid: z.number().optional(),
  carId: z.number().optional(),
  rep: z.number().optional(),
  aid: z.number().optional(),
  gcdValue: z.number().optional(),
  elvl: z.number().optional(),
  bag: z.array(z.union([itemSchema, z.null()])).optional(),
  skillBag: z.array(z.union([itemSchema, z.null()])).optional(),
  toolBag: z.array(z.unknown()).max(0).optional(),
  cardBag: z.array(z.null()).optional(),
  xmogs: z.record(z.string(), itemSchema).optional(),
  spawn: z.strictObject({
    x: z.number(),
    y: z.number(),
    z: z.number(),
  }).optional(),
  cds: z.record(z.string(), z.number()).optional(),
  skills: z.tuple([
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
  ]).optional(),
  xp: z.number().optional(),
  professions: z.record(z.string(), z.strictObject({
    level: z.number(),
    lvl: z.number(),
    md: z.string(),
    xp: z.number(),
  })).optional(),
  missionLvls: z.record(z.string(), z.strictObject({
    lvl: z.number(),
    reward: itemSchema,
  })).optional(),
  mods: z.record(z.string(), z.number()).optional(),
  stats: z.record(z.string(), z.number()).optional(),
  party: z.array(z.strictObject({
    dbId: z.number(),
    name: z.string(),
    level: z.number(),
    id: z.number(),
    uid: z.number(),
    lvl: z.number(),
    isLeader: z.number().optional(),
    leader: z.number().optional(),
  })).optional(),
  inventory: z.array(z.union([itemSchema, z.null()])).optional(),
  i: z.array(z.union([itemSchema, z.null()])).optional(),
  uid: z.number().optional(),
  favor: z.number().optional(),
  lvl: z.number().optional(),
  combat: z.number().optional(),
  gcd: z.number().optional(),
  casting: z.number().optional(),
  crafting: z.number().optional(),
  station: z.number().optional(),
  wild: z.number().optional(),
  safe: z.number().optional(),
  isSafe: z.number().optional(),
  tree: z.number().optional(),
  owner: z.number().optional(),
  qual: z.number().optional(),
  bad: z.number().optional(),
  badCd: z.number().optional(),
  conditions: z.record(z.string(), conditionsSchema).optional(),
  c: z.record(z.string(), conditionsSchema).optional(),
  v: z.number().optional(),
  storage: z.union([z.record(z.string(), itemSchema), z.array(z.union([itemSchema, z.null()]))]).optional(),
  terrain: z.number().optional(),
  ai: z.number().optional(),
  r: z.number().optional(),
  targetId: z.number().optional(),
  tags: z.strictObject({}).optional(), // z.set(z.string()).optional(),
  powerOn: z.number().optional(),
  output: z.array(z.union([itemSchema, z.null()])).optional(),
}))

const characterSchema = z.strictObject({
  id: z.number(),
  md: z.string(),
  x: z.number(),
  y: z.number(),
  z: z.number(),
  mp: z.number(),
  maxMp: z.number(),
  moveSpeed: z.number(),
  level: z.number(),
  fx: z.record(z.string(), oldConditionsSchema),
  dx: z.number(),
  dy: z.number(),
  maxHp: z.number(),
  hp: z.number(),
  name: z.string(),
  player: z.number(),
  gear: z.record(z.string(), z.union([itemSchema, z.null()])),
  mogs: z.record(z.string(), z.string()),
  mtx: z.strictObject({
    face: z.number(),
    skin: z.number(),
    helmet: z.number(),
  }),
  cid: z.number(),
  carId: z.number(),
  rep: z.number(),
  aid: z.number(),
  elvl: z.number(),
  bag: z.array(z.union([itemSchema, z.null()])),
  skillBag: z.array(z.union([itemSchema, z.null()])),
  toolBag: z.array(z.unknown()).max(0),
  cardBag: z.array(z.null()),
  xmogs: z.record(z.string(), itemSchema),
  spawn: z.strictObject({
    x: z.number(),
    y: z.number(),
    z: z.number(),
  }),
  cds: z.record(z.string(), z.number()),
  xp: z.number(),
  professions: z.record(z.string(), z.strictObject({
    level: z.number(),
    lvl: z.number(),
    md: z.string(),
    xp: z.number(),
  })),
  missionLvls: z.record(z.string(), z.strictObject({
    lvl: z.number(),
    reward: itemSchema,
  })),
  mods: z.record(z.string(), z.number()),
  stats: z.record(z.string(), z.number()),
  party: z.array(z.strictObject({
    dbId: z.number(),
    name: z.string(),
    level: z.number(),
    id: z.number(),
    uid: z.number(),
    lvl: z.number(),
    isLeader: z.number().optional(),
    leader: z.number().optional(),
  })).optional(),
  inventory: z.array(z.union([itemSchema, z.null()])),
  i: z.array(z.union([itemSchema, z.null()])),
  uid: z.number(),
  favor: z.number(),
  lvl: z.number(),
  conditions: z.record(z.string(), conditionsSchema),
  c: z.record(z.string(), conditionsSchema),
  skills: z.tuple([
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
    z.union([skillSchema, z.null()]),
  ]),
  combat: z.number(),
  gcd: z.number().optional(),
  casting: z.number().optional(),
  crafting: z.number().optional(),
})

const apiSchema = z.strictObject({
  isReady: z.boolean(),
  draw: z.boolean(),
  errors: z.boolean(),
  debug: z.boolean(),
  fps: z.number(),
  chatHideDelay: z.number(),
  account: accountSchema,
  a: accountSchema,
  entities: entitiesSchema,
  e: entitiesSchema,
  chunks: z.record(z.string(), z.array(z.array(z.array(z.number())))),
  terrain: z.record(z.number(), z.array(z.array(z.number()))), // z.map(z.number(), z.array(z.array(z.number()))),
  nextChatHideAt: z.number(),
  eventDispatcher: z.unknown(),
  editor: z.unknown(),
  camera: z.strictObject({
    x: z.number(),
    y: z.number(),
  }),
  md: z.strictObject({
    e: z.record(z.string(), oldMetadataEntitiesSchema),
    entities: z.record(z.string(), oldMetadataEntitiesSchema),
    i: z.record(z.string(), oldMetadataItemsSchema),
    items: z.record(z.string(), oldMetadataItemsSchema),
    recipes: z.record(z.string(), z.record(z.string(), z.unknown())),
    skills: z.strictObject({})
  }),
  emit: z.function(),
  climb: z.function(),
  readSign: z.function(),
  setTarget: z.function(),
  on: z.function(),
  once: z.function(),
  off: z.function(),
  removeAllListeners: z.function(),
  get: z.function(),
  set: z.function(),
  move: z.function(),
  stop: z.function(),
  useSkill: z.function(),
  isOnGcd: z.function(),
  isOnCd: z.function(),
  canPayCost: z.function(),
  isInRange: z.function(),
  canUseSkill: z.function(),
  hasTag: z.function(),
  sendMail: z.function(),
  enchant: z.function(),
  equip: z.function(),
  unequip: z.function(),
  enterMagicShrub: z.function(),
  getZoneLevel: z.function(),
  getZoneTier: z.function(),
  unstuck: z.function(),
  suicide: z.function(),
  placeItem: z.function(),
  findClosestEntity: z.function(),
  findClosestMonster: z.function(),
  findClosestTree: z.function(),
  findOneEntity: z.function(),
  findAllEntities: z.function(),
  distance: z.function(),
  getTerrainAt: z.function(),
  log: z.function(),
  sendItem: z.function(),
  moveItem: z.function(),
  deleteItem: z.function(),
  partyInvite: z.function(),
  partyKick: z.function(),
  partyPromote: z.function(),
  partyAccept: z.function(),
  partyDecline: z.function(),
  partyLeave: z.function(),
  setSpawn: z.function(),
  stopCraft: z.function(),
  craft: z.function(),
  combine: z.function(),
  sortInv: z.function(),
  useElevator: z.function(),
  enterCar: z.function(),
  exitCar: z.function(),
  moveCar: z.function(),
  destroyBuilding: z.function(),
  buyPlot: z.function(),
  sellPlot: z.function(),
  talkWhisper: z.function(),
  takeItem: z.function(),
  disenchant: z.function(),
  openItem: z.function(),
  fetchMissions: z.function(),
  startMission: z.function(),
  joinMission: z.function(),
  abandonMission: z.function(),
  changeMissionReward: z.function(),
  toggleMissionVisibility: z.function(),
  addSkillPoint: z.function(),
  socket: z.function(),
  unsocket: z.function(),
  openPortal: z.function(),
  openPortalToEvent: z.undefined(),
  enterPortal: z.function(),
  gather: z.function(),
  fillItem: z.function(),
  pourItem: z.function(),
  placeBlock: z.function(),
  takeBlock: z.function(),
  repair: z.function(),
  addMog: z.function(),
  removeMog: z.function(),
  toggleMog: z.function(),
  toggleStation: z.function(),
  loadout: z.function(),
  lockItems: z.function(),
  unlockItems: z.function(),
  stationInfo: z.function(),
  donate: z.function(),
  toCanvasX: z.function(),
  toCanvasY: z.function(),
  removeListener: z.function(),
  sortInventory: z.function(),
  canUseSkillCd: z.function(),
  chop: z.function(),
  mine: z.function(),
  getTerrain: z.function(),
  getChunkHash: z.function(),
  isSkillReady: z.function(),
  isSkillInRange: z.function(),
  canUseSkillRange: z.function(),
  inSkillRange: z.function(),
  useRune: z.function(),
  canUseRune: z.function(),
  hasMp: z.function(),
  canUseSkillCost: z.function(),
  getChunkName: z.function(),
  getChunkKey: z.function(),
  findEntities: z.function(),
  findEntity: z.function(),
  enchantItem: z.function(),
  rip: z.function(),
  selfDestruct: z.function(),
  c: characterSchema,
  char: characterSchema,
  character: characterSchema,
  itemModValue: z.function(),
  itemBaseValue: z.function(),
  getCollisionRectRef: z.function(),
  getCollisionRect: z.function(),
  getHitbox: z.function(),
  getPlacebox: z.function(),
  getEntityName: z.function(),
  getItemModValue: z.function(),
  getItemBaseValue: z.function(),
  constants: z.strictObject({
    VERSION: z.number(),
    INTERACT_RANGE: z.number(),
    CHUNK_SIZE: z.strictObject({
      w: z.number(),
      h: z.number(),
      d: z.number(),
    }),
    ZONE_LEVEL_RADIUS: z.number(),
    ZONE_LEVELS_PER_ZONE_TIER: z.number(),
    MELEE_RANGE: z.number(),
    RANGED_RANGE: z.number(),
    MOVEMENT_SPEED: z.number(),
    GCD: z.number(),
    CRIT: z.number(),
    CRIT_MULT: z.number(),
    DMG_TYPE_FX_CHANCE_BASE: z.number(),
    DMG_TYPE_FX_MAX: z.number(),
    LEVEL_BUFFER: z.number(),
    XP_DEATH_PENALTY: z.number(),
    MAX_MOD_TIER: z.number(),
    MAX_RES: z.number(),
    MAX_DODGE: z.number(),
    MAX_DMG_TYPE_EFFECT: z.number(),
    MIN_REP: z.number(),
    MAX_REP: z.number(),
    CALL_LIMIT: z.number(),
    CALL_LIMIT_TIMESPAN: z.number(),
    BYTE_LIMIT: z.number(),
    BYTE_LIMIT_TIMESPAN: z.number(),
    PX_PER_UNIT: z.number(),
    PX_PER_UNIT_ZOOMED: z.number(),
    MOVEMENT_SPEED_BASE: z.number(),
    GCD_BASE: z.number(),
    RANGE_MELEE_BASE: z.number(),
    PIXELS_PER_UNIT: z.number(),
    MISSION_RANGE: z.number(),
    CHUNK_DIMENSION: z.tuple([z.number(), z.number(), z.number()]),
    CHUNK_DIM: z.tuple([z.number(), z.number(), z.number()]),
    TWO_HANDED_MULT: z.number(),
  }),
  enums: z.strictObject({
    Terrain: z.record(z.string(), z.number()),
    Type: z.record(z.string(), z.symbol()),
    Rarity: z.record(z.string(), z.number()),
  }),
  mdInfo: z.record(z.string(), z.strictObject({
    canCollide: z.boolean().optional(),
    canChop: z.boolean().optional(),
    canHarvest: z.boolean().optional(),
    canHunt: z.boolean().optional(),
    canMine: z.boolean().optional(),
    canOpen: z.boolean().optional(),
    dmgTypes: z.array(z.string()).optional(),
    isArmor: z.boolean().optional(),
    isAccessory: z.boolean().optional(),
    isBox: z.boolean().optional(),
    isEssence: z.boolean().optional(),
    isMat: z.boolean().optional(),
    isMonster: z.boolean().optional(),
    isNpc: z.boolean().optional(),
    isPlant: z.boolean().optional(),
    isPlayer: z.boolean().optional(),
    isPortal: z.boolean().optional(),
    isResource: z.boolean().optional(),
    isSkill: z.boolean().optional(),
    isStation: z.boolean().optional(),
    isTool: z.boolean().optional(),
    isVessel: z.boolean().optional(),
    isWeapon: z.boolean().optional(),
    name: z.string().optional(),
    recipe: z.strictObject({
      stationType: z.string(),
      mats: z.record(z.string(), z.strictObject({
        n: z.number(),
        r: z.number().optional(),
      })),
      minLevel: z.number(),
      minLvl: z.number(),
      professions: z.array(z.string()),
    }).optional(),
    s: z.number().optional(),
    slots: z.array(z.string()).optional(),
    type: z.union([z.string(), z.symbol()]).optional(),
    tags: z.union([z.object({}), z.array(z.string())]).optional(), // z.instanceof(Set).optional(),
  })),
  targetId: z.number(),
  loadScript: z.function(),
  isType: z.function(),
  placeStation: z.function(),
  destroyStation: z.function(),
  takeStation: z.function(),
  canGather: z.function(),
  combineItems: z.function(),
  whisper: z.function(),
  sortI: z.function(),
})

function validateApi() {
  try {
    apiSchema.parse(dw)
    console.log('API is valid')
  } catch (error) {
    if (error instanceof ZodError) {
      // console.error(JSON.stringify(error.errors[0], null, 2))
      error.errors
        // .filter((e) => e.message === 'Required' && e?.received === 'undefined')
        .map((e) => console.error(JSON.stringify(e, null, 2)))
      // console.log([...new Set(error.errors.map((e) => e.message))])
      console.log(`${error.errors.length} errors`)
      return
    }

    console.error('API validation failed', error)
  }
}

// setInterval(validateApi, 10000)
validateApi()
